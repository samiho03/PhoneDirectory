/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Forms;
import javax.swing.table.DefaultTableModel;
import java.util.LinkedList;
import javax.swing.JOptionPane;

/**
 *
 * @author sakun
 */
public class Main extends javax.swing.JFrame {
    private LinkedList<Contact> contacts; //It is a doubly linked list ,stores all the contact objects.
    private DefaultTableModel tableModel; //manage the data displayed in the table
    private LinkedList<Contact> recentSearches; //stores contacts that were recently searched for.
    private LinkedList<Contact> recentlyDeletedContacts; //keeps track of contacts that were recently deleted.
    
    public Main() {
        contacts = new LinkedList<>();
        recentSearches = new LinkedList<>();
        recentlyDeletedContacts = new LinkedList<>();
        initComponents();
        tableModel = new DefaultTableModel(new Object[]{"First Name", "Last Name", "Phone Number", "Relation", "Email"}, 0);
        jTable1.setModel(tableModel);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rSComboMetroBeanInfo1 = new rojerusan.RSComboMetroBeanInfo();
        txtsearch = new app.bolivia.swing.JCTextField();
        btnadd = new rojerusan.RSMaterialButtonRectangle();
        btnedit = new rojerusan.RSMaterialButtonRectangle();
        btndelete = new rojerusan.RSMaterialButtonRectangle();
        btnview = new rojerusan.RSMaterialButtonRectangle();
        btnsort = new rojerusan.RSMaterialButtonRectangle();
        btnrecentsearch = new rojerusan.RSMaterialButtonRectangle();
        btnrecentdelete = new rojerusan.RSMaterialButtonRectangle();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new rojeru_san.complementos.RSTableMetro();
        btnsearch = new rojerusan.RSMaterialButtonCircle();
        cmbcategory = new rojerusan.RSComboMetro();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtsearch.setBorder(null);
        txtsearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        getContentPane().add(txtsearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 48, 170, 20));
        txtsearch.getAccessibleContext().setAccessibleDescription("");

        btnadd.setBackground(new java.awt.Color(134, 112, 197));
        btnadd.setBorder(null);
        btnadd.setText("Add a contact");
        btnadd.setToolTipText("");
        btnadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddActionPerformed(evt);
            }
        });
        getContentPane().add(btnadd, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 180, 40));

        btnedit.setBackground(new java.awt.Color(134, 112, 197));
        btnedit.setBorder(null);
        btnedit.setText("Edit");
        btnedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btneditActionPerformed(evt);
            }
        });
        getContentPane().add(btnedit, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 180, 40));

        btndelete.setBackground(new java.awt.Color(134, 112, 197));
        btndelete.setBorder(null);
        btndelete.setText("Delete");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btndelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 218, 180, 40));

        btnview.setBackground(new java.awt.Color(134, 112, 197));
        btnview.setBorder(null);
        btnview.setText("View all");
        btnview.setToolTipText("");
        btnview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnviewActionPerformed(evt);
            }
        });
        getContentPane().add(btnview, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 267, 180, 40));

        btnsort.setBackground(new java.awt.Color(134, 112, 197));
        btnsort.setBorder(null);
        btnsort.setText("Sort A-Z");
        btnsort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsortActionPerformed(evt);
            }
        });
        getContentPane().add(btnsort, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 315, 180, 40));

        btnrecentsearch.setBackground(new java.awt.Color(134, 112, 197));
        btnrecentsearch.setBorder(null);
        btnrecentsearch.setText("Recent Search");
        btnrecentsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrecentsearchActionPerformed(evt);
            }
        });
        getContentPane().add(btnrecentsearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 365, 180, 40));

        btnrecentdelete.setBackground(new java.awt.Color(134, 112, 197));
        btnrecentdelete.setBorder(null);
        btnrecentdelete.setText("Recent delete");
        btnrecentdelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrecentdeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnrecentdelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 415, 180, 40));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setColorBackgoundHead(new java.awt.Color(134, 112, 197));
        jTable1.setColorBordeFilas(new java.awt.Color(204, 204, 204));
        jTable1.setColorBordeHead(new java.awt.Color(204, 204, 204));
        jTable1.setColorFilasBackgound2(new java.awt.Color(255, 255, 255));
        jTable1.setColorFilasForeground1(new java.awt.Color(0, 0, 0));
        jTable1.setColorFilasForeground2(new java.awt.Color(0, 0, 0));
        jTable1.setColorSelBackgound(new java.awt.Color(236, 236, 255));
        jTable1.setColorSelForeground(new java.awt.Color(102, 102, 102));
        jTable1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTable1.setFuenteFilas(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        jTable1.setFuenteFilasSelect(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jTable1.setFuenteHead(new java.awt.Font("Yu Gothic UI", 1, 16)); // NOI18N
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jTable1.setRowHeight(25);
        jTable1.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(jTable1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 110, 550, 350));

        btnsearch.setBackground(new java.awt.Color(134, 112, 197));
        btnsearch.setBorder(null);
        btnsearch.setText("â€”>");
        btnsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsearchActionPerformed(evt);
            }
        });
        getContentPane().add(btnsearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(775, 38, 40, 40));

        cmbcategory.setBorder(null);
        cmbcategory.setForeground(new java.awt.Color(0, 0, 0));
        cmbcategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "First name", "Last name", "Phone number", "Relation", "Email" }));
        cmbcategory.setColorArrow(new java.awt.Color(137, 112, 197));
        cmbcategory.setColorBorde(new java.awt.Color(255, 255, 255));
        cmbcategory.setColorFondo(new java.awt.Color(255, 255, 255));
        cmbcategory.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        getContentPane().add(cmbcategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 47, 170, 24));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/main01.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btneditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btneditActionPerformed
        int selectedRow = jTable1.getSelectedRow();  //get the index of the selected row in the table
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a contact to edit.");
            return;
        }
        Contact contact = contacts.get(selectedRow); //get the contact associated with the selected row
        new Edit(this, contact).setVisible(true);
    }//GEN-LAST:event_btneditActionPerformed

    private void btnaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddActionPerformed
        new Add(this).setVisible(true);
    }//GEN-LAST:event_btnaddActionPerformed

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        int selectedRow = jTable1.getSelectedRow();   // get the selected row index
        if (selectedRow == -1) {    //if a row is selected
            JOptionPane.showMessageDialog(this, "Please select a contact to delete.");
            return;
        }
        Contact contactToDelete = contacts.get(selectedRow); // Get the contact to delete
        recentlyDeletedContacts.add(contactToDelete); // Add it to recently deleted contacts list
        contacts.remove(selectedRow);  //remove the selected contact from the list
        tableModel.removeRow(selectedRow);
        JOptionPane.showMessageDialog(this, "Contact deleted successfully!");
    }//GEN-LAST:event_btndeleteActionPerformed

    private void btnviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnviewActionPerformed
      
        tableModel.setRowCount(0); // Clear existing rows
        for (Contact contact : contacts) {
            Object[] rowData = new Object[]{
                contact.getFirstName(),
                contact.getLastName(),
                contact.getPhoneNumber(),
                contact.getRelation(),
                contact.getEmail()
            };
            tableModel.addRow(rowData);
        }
    }//GEN-LAST:event_btnviewActionPerformed

    private void btnsortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsortActionPerformed
           // Bubble sort algorithm to sort contacts by first name (case-insensitive)
    int n = contacts.size();
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            Contact contact1 = contacts.get(j);
            Contact contact2 = contacts.get(j + 1);

            // Compare first names in a case-insensitive manner
            if (contact1.getFirstName().compareToIgnoreCase(contact2.getFirstName()) > 0) {
                // Swap the contacts
                contacts.set(j, contact2);
                contacts.set(j + 1, contact1);
            }
        }
    }

    // Refresh the table to show sorted contacts
    refreshTable();
    }//GEN-LAST:event_btnsortActionPerformed
    private void refreshTable() 
    {
        
       // A helper method to clear the table and repopulate it with the current state of the contacts list.
        
    tableModel.setRowCount(0); // Clear existing rows
    for (Contact contact : contacts) {
        Object[] rowData = new Object[]{
            contact.getFirstName(),
            contact.getLastName(),
            contact.getPhoneNumber(),
            contact.getRelation(),
            contact.getEmail()
        };
        tableModel.addRow(rowData);
    }
    }

    private void btnrecentsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrecentsearchActionPerformed
       
        tableModel.setRowCount(0); 

        // Display recent searches with the most recent first
        for (int i = recentSearches.size() - 1; i >= 0; i--) {
        Contact contact = recentSearches.get(i);
        Object[] rowData = new Object[]{
            contact.getFirstName(),
            contact.getLastName(),
            contact.getPhoneNumber(),
            contact.getRelation(),
            contact.getEmail()
        };
        tableModel.addRow(rowData);
    }

    
    }//GEN-LAST:event_btnrecentsearchActionPerformed
    
    private void btnrecentdeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrecentdeleteActionPerformed
       tableModel.setRowCount(0); // Clear existing rows

     // Display recently deleted contacts with the most recent first
        for (int i = recentlyDeletedContacts.size() - 1; i >= 0; i--) {
        Contact contact = recentlyDeletedContacts.get(i);
        Object[] rowData = new Object[]{
            contact.getFirstName(),
            contact.getLastName(),
            contact.getPhoneNumber(),
            contact.getRelation(),
            contact.getEmail()
        };
        tableModel.addRow(rowData);
        }
    }//GEN-LAST:event_btnrecentdeleteActionPerformed

    private void btnsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsearchActionPerformed
        String selectedCategory = cmbcategory.getSelectedItem().toString();
        String searchText = txtsearch.getText().trim().toLowerCase();

        // Clear the table before displaying search results
        tableModel.setRowCount(0);
         // Clear previous searches if needed

        for (Contact contact : contacts) {
            String valueToCheck = "";
            switch (selectedCategory) {
                case "First name":
                    valueToCheck = contact.getFirstName().toLowerCase();
                    break;
                case "Last name":
                    valueToCheck = contact.getLastName().toLowerCase();
                    break;
                case "Phone number":
                    valueToCheck = contact.getPhoneNumber().toLowerCase();
                    break;
                case "Relation":
                    valueToCheck = contact.getRelation().toLowerCase();
                    break;
                case "Email":
                    valueToCheck = contact.getEmail().toLowerCase();
                    break;
            }

        if (valueToCheck.contains(searchText)) {
            Object[] rowData = new Object[]{
                contact.getFirstName(),
                contact.getLastName(),
                contact.getPhoneNumber(),
                contact.getRelation(),
                contact.getEmail()
            };
            tableModel.addRow(rowData);
            recentSearches.add(contact); // Add found contact to recent searches
        }
    }
    }//GEN-LAST:event_btnsearchActionPerformed
    public void addContact(Contact contact) {
        contacts.add(contact);
        Object[] rowData = new Object[]{
            contact.getFirstName(),
            contact.getLastName(),
            contact.getPhoneNumber(),
            contact.getRelation(),
            contact.getEmail()
        };
        tableModel.addRow(rowData);
    }

    public void updateContact(Contact contact) {
        int selectedRow = jTable1.getSelectedRow();
        contacts.set(selectedRow, contact);
        tableModel.setValueAt(contact.getFirstName(), selectedRow, 0);
        tableModel.setValueAt(contact.getLastName(), selectedRow, 1);
        tableModel.setValueAt(contact.getPhoneNumber(), selectedRow, 2);
        tableModel.setValueAt(contact.getRelation(), selectedRow, 3);
        tableModel.setValueAt(contact.getEmail(), selectedRow, 4);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojerusan.RSMaterialButtonRectangle btnadd;
    private rojerusan.RSMaterialButtonRectangle btndelete;
    private rojerusan.RSMaterialButtonRectangle btnedit;
    private rojerusan.RSMaterialButtonRectangle btnrecentdelete;
    private rojerusan.RSMaterialButtonRectangle btnrecentsearch;
    private rojerusan.RSMaterialButtonCircle btnsearch;
    private rojerusan.RSMaterialButtonRectangle btnsort;
    private rojerusan.RSMaterialButtonRectangle btnview;
    private rojerusan.RSComboMetro cmbcategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private rojeru_san.complementos.RSTableMetro jTable1;
    private rojerusan.RSComboMetroBeanInfo rSComboMetroBeanInfo1;
    private app.bolivia.swing.JCTextField txtsearch;
    // End of variables declaration//GEN-END:variables
}
